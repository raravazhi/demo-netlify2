<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubeflow on vSphere – Documentation</title>
    <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/</link>
    <description>Recent content in Documentation on Kubeflow on vSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://vmware.github.io/ml-ops-platform-for-vsphere/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Bitfusion</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/vmware-product/bitfusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/vmware-product/bitfusion/</guid>
      <description>
        
        
        &lt;p&gt;This chapter is for Kubeflow integration with vSphere Infrastructure resources such as Bitfusion server or Nvidia GPU.&lt;/p&gt;
&lt;h2 id=&#34;vmware-bitfusion&#34;&gt;VMware Bitfusion&lt;/h2&gt;
&lt;p&gt;We will explain in this session the benefits of the Kubeflow integration with VMware vSphere Bitfusion.&lt;/p&gt;
&lt;p&gt;Since AI/ML is a new type of application, we should look at its requirements and make sure we can meet them. There are two requirements we are considering here. You will likely want to run your app in containers and You will likely want to use hardware acceleration (a GPU, typically) to run your AI/ML application.&lt;/p&gt;
&lt;p&gt;However, GPUs have traditionally been difficult to share. As a piece of hardware sitting on a bus, only the software running local to that bus has been able to access it. If you move the software, you lose access. Even worse, two virtual machines, both running locally to a GPU, cannot share it. A GPU must be passed exclusively to one VM or the other. Compounding that, a single user, VM, or application seldom uses the GPU efficiently. It is not atypical for GPUs to sit idle 85% of the time. The industry average on this is hard to obtain, and it varies a lot from use-case to use-case. But if the price of a GPU seems high, it seems even higher when it is underutilized to this extent.&lt;/p&gt;
&lt;p&gt;Enter VMware vSphere Bitfusion. It lets you share GPUs in two ways. Bitfusion sets up a pool of GPU servers, and gives GPU access, remotely, across the network, to applications or microservices running on client VMs or containers set up for each piece of software. GPUs, over the course of time, can “fly” from one application to another, being allocated and deallocated dynamically whenever an application needs hardware acceleration. Bitfusion also partitions GPUs into fractions of arbitrary size (it is the GPU memory that is partitioned), so the GPU can be used concurrently by multiple applications. All this raises the utilization and efficiency of the precious GPU resources.&lt;/p&gt;
&lt;p&gt;An inteagrated &lt;a href=&#34;https://www.vmware.com/products/vsphere.html#resources&#34;&gt;VMware vSphere&lt;/a&gt;, Bitfusion delivers the ability to share resources in addition to providing better utilization of existing or new hardware accelerator resources. Bitfusion can dynamically share hardware accelerator devices, such as GPUs, across a network.And this technology is for specific use with AI/ML software such as TensorFlow and PyTorch.&lt;/p&gt;
&lt;p&gt;For more information about Bitfusion, please visit &lt;a href=&#34;https://docs.vmware.com/cn/VMware-vSphere-Bitfusion/index.html&#34;&gt;vSphere Bitfusion document page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installation--use-case&#34;&gt;Installation &amp;amp; Use Case&lt;/h2&gt;
&lt;p&gt;The bulk of this session will be a detailed example of how to run a TensorFlow application in a containerized Bitfusion environment with remote GPU access.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../1_arch.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is the achitecture of the Kubeflow Jupyer Notebook integration with Bitfsion. You can follow the official guide to install bifusion server with the &lt;a href=&#34;https://github.com/vmware/bitfusion-with-kubernetes-integration&#34;&gt;Bifusion Device Plugin&lt;/a&gt;. We also upload the package of kubeflow integration with bitfusion in the &lt;a href=&#34;https://github.com/harperjuanl/kubeflow-v1.6.0-rc.1&#34;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How can we use the same image for both of Bitfusion and Nvidia. Let me show you the reason. Under the hood, when a Notebook created, we’ve modified the Kubeflow code to put bitfusion configuration info into the annotations based on your selection and record the GPU resource requests and limits.&lt;/p&gt;
&lt;p&gt;Then the Modified Notebook controller will transfer all these information related to the bitfusion to the “StatefulSet” resource objects.&lt;/p&gt;
&lt;p&gt;When “Bitfusion Device Plugin” see that information in the Pod Resource, it will inject the bitfusion client library, server config, client certificate and all necessary information automatically  to make this notebook a valid bitfusion client.&lt;/p&gt;
&lt;h3 id=&#34;use-case&#34;&gt;Use Case&lt;/h3&gt;
&lt;p&gt;When we are creating Jupyter Notebook instance in the Notebook page of the Kubeflow dashboard, we are giving the name, choose one of the Kubeflow official images. As you can see in the following figure, in the GPU resources settings, we choose th “BITFUSION” option. After launch the new notebook, we can easily run the bitfusion client applications in the Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../2_notebook.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;We are running a bitfusion benchmark applications in this use case. From the output of the benchmark, we will find information related to the Bitfusion server resource allocation. You can get the source code of the example from &lt;a href=&#34;&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;%env &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:/bitfusion/bitfusion-client-ubuntu2004_4.5.0-4_amd64.deb/usr/bin:/opt/conda/bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# test for occupy bitfusion &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;!bitfusion run -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -- bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# TensorFlow benchmark assuming an imagenet dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;!bitfusion run -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -- python3 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;./benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data_format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NCHW &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--batch_size&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--model&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;resnet50 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--variable_update&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;replicated &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--local_parameter_device&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gpu &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--nodistortions &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--num_gpus&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--num_batches&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data_dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../data &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data_name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;imagenet &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--use_fp16&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;False
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# release bitfusion resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bitfusion release_gpus -f /tmp/bitfuiosn...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When running the bitfusion notebook, we can monitor the GPU usage in the vCenter Server console, shown as the demo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../4_bitfusion_console.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;roadmap&#34;&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;In the above use case, you may find that we can only run python scripts with a bitfusion wrapper. But we will build a “Bitfusion Kernel” in the near feature, shown as the screen, to let users to run every python code blocks into bitfusion environment&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../3_bitfusion_kernel_roadmap.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configure a proxy</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/troubleshooting/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/troubleshooting/proxy/</guid>
      <description>
        
        
        &lt;h2 id=&#34;quick-deployment&#34;&gt;Quick deployment&lt;/h2&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;[VMware internal proxy] Deploy imageswap webhook with default settings:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:xujinheng/imageswap-webhook-proxycache.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; imageswap-webhook-proxycache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Deletion is necessary to avoid MutatingWebhookConfiguration updating failures&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# see issue https://github.com/phenixblue/imageswap-webhook/issues/78&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete -f imageswap_deploy_VMware.yaml --ignore-not-found&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete MutatingWebhookConfiguration imageswap-webhook --ignore-not-found&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f imageswap_deploy_VMware.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;[Public proxy] Deploy imageswap webhook with default settings:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:xujinheng/imageswap-webhook-proxycache.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; imageswap-webhook-proxycache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Deletion is necessary to avoid MutatingWebhookConfiguration updating failures&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# see issue https://github.com/phenixblue/imageswap-webhook/issues/78&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete -f imageswap_deploy_Public.yaml --ignore-not-found&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete MutatingWebhookConfiguration imageswap-webhook --ignore-not-found&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f imageswap_deploy_Public.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please Refer to &lt;a href=&#34;https://github.com/xujinheng/imageswap-webhook-proxycache&#34;&gt;https://github.com/xujinheng/imageswap-webhook-proxycache&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;proxy-resources&#34;&gt;Proxy resources&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Registry&lt;/th&gt;
&lt;th&gt;Public Proxy&lt;/th&gt;
&lt;th&gt;Internal VMware Proxy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker.io&lt;/td&gt;
&lt;td&gt;docker.nju.edu.cn&lt;/td&gt;
&lt;td&gt;harbor-repo.vmware.com/dockerhub-proxy-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcr.io&lt;/td&gt;
&lt;td&gt;gcr.nju.edu.cn&lt;/td&gt;
&lt;td&gt;harbor-repo.vmware.com/gcr-proxy-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s.gcr.io&lt;/td&gt;
&lt;td&gt;gcr.nju.edu.cn/google-containers&lt;/td&gt;
&lt;td&gt;harbor-repo.vmware.com/gcr-proxy-cache/google-containers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ghcr.io&lt;/td&gt;
&lt;td&gt;ghcr.nju.edu.cn&lt;/td&gt;
&lt;td&gt;harbor-repo.vmware.com/ghcr-proxy-cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quay.io&lt;/td&gt;
&lt;td&gt;quay.nju.edu.cn&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install Kapp-controller</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/troubleshooting/app-platform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/troubleshooting/app-platform/</guid>
      <description>
        
        
        &lt;p&gt;Go to &lt;a href=&#34;https://github.com/vmware-tanzu/carvel-kapp-controller/releases&#34;&gt;https://github.com/vmware-tanzu/carvel-kapp-controller/releases&lt;/a&gt;, and install one release version.&lt;/p&gt;
&lt;p&gt;Or run the following command to install it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;KAPP_CONTROLLER_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v0.41.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Namespace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: RoleBinding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: rb-all-sa_ns-kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;roleRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: psp:vmware-system-privileged
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;subjects:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;- kind: Group
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: system:serviceaccounts:kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/download/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KAPP_CONTROLLER_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/release.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After installation, you should see a pod whose name starts with &lt;strong&gt;kapp-controller&lt;/strong&gt; when running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pod -A &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kapp-controller    kapp-controller-5b8579cb89-bkgps     2/2     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Introduction</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/introduction/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;VMware vSphere 8 is one of the most advanced enterprise workload platforms. It brings the benefits of cloud to on-premises workloads, supercharges performance through DPUs and GPUs, and accelerates innovation with an enterprise-ready integrated Kubernetes runtime.&lt;/p&gt;
&lt;p&gt;In the world of AI/ML, vSphere 8 unleashes the power of AI for all enterprises by providing world-class end-to-end AI-Ready infrastructure for enterprise IT. vSphere AI/ML solutions enable IT admins to deliver an AI-Ready infrastructure on which data scientists can deliver and scale AI and ML projects and help organizations scale modern workloads on the same vSphere infrastructure that they have already invested in.&lt;/p&gt;
&lt;p&gt;Kubeflow is a free and open-source platform dedicated to making deployments of machine learning (ML) workflows on Kubernetes simple, portable and scalable. To achieve this goal, Kubeflow has incorporated various relevant open-source tools that work well with Kubernetes. Those tools include Argo for pipeline orchestration, Istio for service mesh, Jupyter for notebooks, Spark, TensorBoard, Katib, et al. Kubeflow is supported by the biggest names in tech, receiving over 1000 contributions from companies like Google, AWS, Microsoft, VMware, Red Hat, Bloomberg, Cisco, IBM, and Intel.&lt;/p&gt;
&lt;p&gt;VMware vSphere is contributing to the open-source Kubeflow community by providing vSphere-specific distribution of Kubeflow, named &lt;em&gt;&lt;strong&gt;Kubeflow on vSphere&lt;/strong&gt;&lt;/em&gt;, to help enterprises and organizations build and streamline an end-to-end ML workflow. With the most advanced features of vSphere 8 as well as the seamless enablement and integration of Kubeflow, Kubeflow on vSphere aims to help users build highly reliable, secure, portable and scalable ML workflows with reduced operational overhead.&lt;/p&gt;
&lt;p&gt;Especially, Kubeflow on vSphere provides Carvel packaging and vSphere app platform support, authentication support, GPU virtualization support, etc. More sophisticated integration and features are on the way.&lt;/p&gt;
&lt;p&gt;Meanwhile, we maintained documentation &lt;a href=&#34;https://core.vmware.com/aiml-solutions&#34;&gt;Running Kubeflow on AI-Ready Enterprise Platform on VMware vSphere 7 with VMware Tanzu Kubernetes Grid&lt;/a&gt;. If you want to know how to deploy and use vanilla Kubeflow on vSphere 7 with TKG, this documentation is a good start.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;Now move forward to &lt;a href=&#34;../deployment/&#34;&gt;Getting Started&lt;/a&gt; and follow our step-by-step instructions to deploy Kubeflow on vSphere!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Prerequisites</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/prerequisites/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t have any hardware resource or do not want to setup from the ground, reach out to us at the slack channel &lt;a href=&#34;https://vmware.slack.com/archives/C046YEZMWQK&#34;&gt;#peach&lt;/a&gt; to request an account for Kubeflow and JupyterLab extension trials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vSphere 8.0 with Tanzu Deployment&lt;/strong&gt;: For a greenfield deployment (no vSphere with Tanzu deployed yet), you need to deploy vSphere with Tanzu first.
&lt;ul&gt;
&lt;li&gt;For the standard and regular setup, please refer to VMware official document &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-152BE7D2-E227-4DAA-B527-557B564D9718.html&#34;&gt;vSphere with Tanzu Configuration and Management&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you only have limited hardware resource, for example, one server node, please refer to &lt;a href=&#34;https://confluence.eng.vmware.com/display/VCP/TKG+demo+appliance+setup+guide&#34;&gt;this document&lt;/a&gt; of vSphere with Tanzu deployment for testing purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you want to use Nvidia GPU resources on vSphere platform, setup vGPU or Bitfusion under TKG with following documents&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vGPU&lt;/strong&gt;: &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-2B4CAE86-BAF4-4411-ABB1-D5F2E9EF0A3D.html&#34;&gt;Deploy AI/ML Workloads on Tanzu Kubernetes Clusters&lt;/a&gt; / &lt;a href=&#34;https://wiki.eng.vmware.com/IDEsxGpu/2022/Drivers&#34;&gt;Internal Docs and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bitfusion&lt;/strong&gt;: &lt;a href=&#34;https://confluence.eng.vmware.com/pages/viewpage.action?pageId=1512830863&#34;&gt;bitfusion_device_plugin deployment on TKG 1.2+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Users and Login</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab1/</guid>
      <description>
        
        
        &lt;h2 id=&#34;access-kubeflow-central-dashboard&#34;&gt;Access Kubeflow Central Dashboard&lt;/h2&gt;
&lt;p&gt;To get the IP address of Kubeflow Central Dashboard, there are three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you set &lt;code&gt;service_type&lt;/code&gt; to &lt;code&gt;LoadBalancer&lt;/code&gt;, run the command below and visit &lt;code&gt;EXTERNAL-IP&lt;/code&gt; of &lt;code&gt;istio-ingressgateway&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## In this example, we should visit http://10.105.151.142:80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get svc istio-ingressgateway -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                                                      AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingressgateway   LoadBalancer   198.51.217.125   10.105.151.142   15021:31063/TCP,80:30926/TCP,443:31275/TCP,31400:30518/TCP,15443:31204/TCP   11d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you set &lt;code&gt;service_type&lt;/code&gt; to &lt;code&gt;NodePort&lt;/code&gt;, run the command below and visit &lt;code&gt;nodeIP&lt;/code&gt;:&lt;code&gt;nodePort&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## In this example, any one of the following will work:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http://10.105.151.73:30926&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http://10.105.151.74:30926&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http://10.105.151.75:30926&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get svc istio-ingressgateway -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                   TYPE       CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                                                      AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingressgateway   NodePort   198.51.217.125   &amp;lt;none&amp;gt;        15021:31063/TCP,80:30926/TCP,443:31275/TCP,31400:30518/TCP,15443:31204/TCP   11d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get nodes -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                                      STATUS   ROLES                  AGE   VERSION            INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;v1a2-v1-23-8-tkc-v100-8c-dcpvc-4zct9                      Ready    control-plane,master   26d   v1.23.8+vmware.2   10.105.151.73   &amp;lt;none&amp;gt;        Ubuntu 20.04.4 LTS   5.4.0-124-generic   containerd://1.6.6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;v1a2-v1-23-8-tkc-v100-8c-workers-zwfx4-77b7df85f7-f7f6f   Ready    &amp;lt;none&amp;gt;                 26d   v1.23.8+vmware.2   10.105.151.74   &amp;lt;none&amp;gt;        Ubuntu 20.04.4 LTS   5.4.0-124-generic   containerd://1.6.6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;v1a2-v1-23-8-tkc-v100-8c-workers-zwfx4-77b7df85f7-l5mp5   Ready    &amp;lt;none&amp;gt;                 26d   v1.23.8+vmware.2   10.105.151.75   &amp;lt;none&amp;gt;        Ubuntu 20.04.4 LTS   5.4.0-124-generic   containerd://1.6.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use port-forwarding. Then visit the IP address of your client-side machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# if you are running the command locally, you should visit http://localhost:8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward -n istio-system svc/istio-ingressgateway --address 0.0.0.0 8080:80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then you can use default user and password to login&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../screenshots/dex.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Email: user@example.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Password: &lt;span class=&#34;m&#34;&gt;12341234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../screenshots/centraldashboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;static-user-creation&#34;&gt;Static User Creation&lt;/h2&gt;
&lt;p&gt;Dex allows use to create a static user, and store the username / password in Kubernetes &lt;code&gt;configmap&lt;/code&gt; object.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a python file that create the hash of your password&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install passlib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt; password_hash.py &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;import argparse
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;from passlib.hash import bcrypt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;parser = argparse.ArgumentParser()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;parser.add_argument(&amp;#39;--password&amp;#39;, type=str, metavar=&amp;#39;P&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;args = parser.parse_args()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;print(bcrypt.using(rounds=12, ident=&amp;#34;2y&amp;#34;).hash(args.password))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add new users to values.yaml files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt; values.yaml &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;imageswap_labels: True
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;service_type: &amp;#34;LoadBalancer&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IP_address: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;CD_REGISTRATION_FLOW: True
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;static_users: 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;- email: &amp;#34;user@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  hash: $(python3 password_hash.py --password 12341234)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;- email: &amp;#34;admin@vsphere.local&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  hash: $(python3 password_hash.py --password 88888888)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update to an updated values file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; kctrl package installed update --package-install kubeflow --values-file values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart dex&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl rollout restart deployment dex -n auth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Follow the Registration Flow, create your Kubeflow profile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../screenshots/CD_REGISTRATION_FLOW_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../screenshots/CD_REGISTRATION_FLOW_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will see a profile and namespace being created&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get profile,namespace admin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                         AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;profile.kubeflow.org/admin   3m40s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME              STATUS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;namespace/admin   Active   3m40s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-pod-security-policy-for-your-namespace&#34;&gt;Add pod-security-policy for your namespace&lt;/h2&gt;
&lt;p&gt;To prevent error like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;create Pod test-0 in StatefulSet &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; failed error: pods &lt;span class=&#34;s2&#34;&gt;&amp;#34;test-0&amp;#34;&lt;/span&gt; is forbidden: PodSecurityPolicy: unable to admit pod: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the following command to Add pod-security-policy for the namespace you just created, it will grant access to create pods in the namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;admin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: RoleBinding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: rb-all-sa_ns-${NAMESPACE}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: ${NAMESPACE}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;roleRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: psp:vmware-system-privileged
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;subjects:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;- kind: Group
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: system:serviceaccounts:${NAMESPACE}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Now you are ready to move to the next tutorial &lt;a href=&#34;../lab2&#34;&gt;Notebook&lt;/a&gt; about Data cleaning, EDA, feature engineering, model training, evaluations&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create and configure a vSphere Namespace</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/namespace/</guid>
      <description>
        
        
        &lt;h2 id=&#34;create-a-content-library&#34;&gt;Create a Content Library&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Follow the docs &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-installation-configuration/GUID-6519328C-E4B7-46DE-BE2D-FC9CA0994C39.html&#34;&gt;here&lt;/a&gt; to create a Subscribed Content Library.&lt;/p&gt;
&lt;h4 id=&#34;examples-configurations&#34;&gt;Examples Configurations:&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Settings&lt;/th&gt;
&lt;th&gt;Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;content-library-kubeflow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subscription URL&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://build-squid.eng.vmware.com/build/mts/release/bora-20532714/publish/lib.json&#34;&gt;http://build-squid.eng.vmware.com/build/mts/release/bora-20532714/publish/lib.json&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authentication&lt;/td&gt;
&lt;td&gt;Not enabled&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Library content&lt;/td&gt;
&lt;td&gt;Download all library content immediately&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Security policy&lt;/td&gt;
&lt;td&gt;Not enabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You are free to select one of the following Tanzu Kubernetes Release as &lt;code&gt;Subscription URL&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tanzu Kubernetes Release Supported&lt;/th&gt;
&lt;th&gt;Subscription URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v1.21.6&amp;mdash;vmware.1-tkg.1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wp-content.vmware.com/v2/latest/lib.json&#34;&gt;https://wp-content.vmware.com/v2/latest/lib.json&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.22.11&amp;mdash;vmware.2-tkg.2-zshippable&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://build-squid.eng.vmware.com/build/mts/release/bora-20532714/publish/lib.json&#34;&gt;http://build-squid.eng.vmware.com/build/mts/release/bora-20532714/publish/lib.json&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.23.8&amp;mdash;vmware.2-tkg.2-zshippable&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wp-content.vmware.com/v2/latest/lib.json&#34;&gt;https://wp-content.vmware.com/v2/latest/lib.json&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If the link expires, please find a new build of &lt;strong&gt;ubuntu-ova&lt;/strong&gt; with &lt;strong&gt;Tanzu Kubernetes Release versions supported&lt;/strong&gt; here: &lt;a href=&#34;https://buildweb.eng.vmware.com/ob/?product=cayman_tkg_ova_signer&amp;amp;branch=All+Branches&amp;amp;duration=alltime&amp;amp;only_ondisk=true&#34;&gt;https://buildweb.eng.vmware.com/ob/?product=cayman_tkg_ova_signer&amp;amp;branch=All+Branches&amp;amp;duration=alltime&amp;amp;only_ondisk=true&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;create-vm-classes-and-storage-policies-optional&#34;&gt;Create VM Classes and Storage Policies [optional]&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: you can skip the step if there are existing VM classes and storage policies that meet the needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please follow the docs to create or use existing VM classes and storage policies. Make sure the specification meets the computing resources listed in the table below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a VM class: &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-services-workloads/GUID-18C7B2E3-BCF5-488C-9C50-937E29BB0C48.html&#34;&gt;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-services-workloads/GUID-18C7B2E3-BCF5-488C-9C50-937E29BB0C48.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a storage policy: &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-storage/GUID-8D51CECC-ED3B-424E-BFE2-43379729A653.html&#34;&gt;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-storage/GUID-8D51CECC-ED3B-424E-BFE2-43379729A653.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;kubernetes-cluster-resources-recommended&#34;&gt;Kubernetes Cluster Resources (Recommended)&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;VM&lt;/th&gt;
&lt;th&gt;VM Count&lt;/th&gt;
&lt;th&gt;CPU Cores&lt;/th&gt;
&lt;th&gt;Memory (GB)&lt;/th&gt;
&lt;th&gt;Disk (GB)&lt;/th&gt;
&lt;th&gt;Nvidia GPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Control Plane&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Worker&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;1+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;create-a-vsphere-namespace&#34;&gt;Create a vSphere namespace&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Follow the docs &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-installation-configuration/GUID-177C23C4-ED81-4ADD-89A2-61654C18201B.html&#34;&gt;here&lt;/a&gt; to create and configure a vSphere namespace, including the storage policies, Content Library and Associated VM Classes you would like to use later when creating the Tanzu Kubernetes Cluster.&lt;/p&gt;
&lt;h4 id=&#34;examples-configurations-1&#34;&gt;Examples Configurations:&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Settings&lt;/th&gt;
&lt;th&gt;Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;namespace-kubeflow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage Policies&lt;/td&gt;
&lt;td&gt;pacific-storage-policy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Library&lt;/td&gt;
&lt;td&gt;content-library-kubeflow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Associated VM Classes&lt;/td&gt;
&lt;td&gt;guaranteed-large&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Now you are ready to move to the next section &lt;a href=&#34;../cluster&#34;&gt;Create a Tanzu Kubernetes Cluster&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Notebooks</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab2/</guid>
      <description>
        
        
        &lt;h1 id=&#34;full-source&#34;&gt;Full Source&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;You can download the complete Jupyter Notebook &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab2.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;preview&#34;&gt;Preview&lt;/h1&gt;
&lt;hr&gt;
&lt;div&gt;
&lt;iframe 
style=&#34;
width: 100%;
height: 80vh;
border: 1px solid #aaa;
margin-bottom: 20px;
&#34;
src=&#34;https://nbviewer.org/github/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab2.ipynb?flush_cache=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h1 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Now move forward to &lt;a href=&#34;../lab3&#34;&gt;Training Operators&lt;/a&gt; about PyTorch distributed training with GPU&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PyTorch Training (PyTorchJob)</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab3/</guid>
      <description>
        
        
        &lt;h1 id=&#34;full-source&#34;&gt;Full Source&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;You can download the complete Jupyter Notebook &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab3.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;preview&#34;&gt;Preview&lt;/h1&gt;
&lt;hr&gt;
&lt;div&gt;
&lt;iframe 
style=&#34;
width: 100%;
height: 80vh;
border: 1px solid #aaa;
margin-bottom: 20px;
&#34;
src=&#34;https://nbviewer.org/github/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab3.ipynb?flush_cache=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h1 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h1&gt;
&lt;p&gt;Now you are ready to move to the next tutorial &lt;a href=&#34;../lab4&#34;&gt;Serving&lt;/a&gt; about model serving&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a Tanzu Kubernetes Cluster</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/cluster/</guid>
      <description>
        
        
        &lt;h2 id=&#34;install-the-kubernetes-cli-tools-for-vsphere&#34;&gt;Install the Kubernetes CLI Tools for vSphere&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Option 1: Follow the docs &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-installation-configuration/GUID-0F6E45C4-3CB1-4562-9370-686668519FCA.html&#34;&gt;here&lt;/a&gt; to open the download page, download and install the Kubernetes CLI tools.&lt;/p&gt;
&lt;p&gt;Option 2: Follow the docs &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-with-tanzu-installation-configuration/GUID-0F6E45C4-3CB1-4562-9370-686668519FCA.html&#34;&gt;here&lt;/a&gt;, select &lt;strong&gt;Copy the link&lt;/strong&gt; beneath the &lt;strong&gt;Link to CLI Tools&lt;/strong&gt; heading, set it to VSPHERE_SUPERVISOR_CLUSTER_IP. Then run the following shell commands to install the Kubernetes CLI Tools.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Note: Please Set the VSPHERE_SUPERVISOR_CLUSTER_IP to the &amp;#34;Link to CLI Tools&amp;#34;, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# e.g. VSPHERE_SUPERVISOR_CLUSTER_IP=192.168.123.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_SUPERVISOR_CLUSTER_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;The_IP_address_of_Link_to_CLI_Tools&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;uname&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; Darwin &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;darwin-amd64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;linux-amd64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget --no-check-certificate https://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_SUPERVISOR_CLUSTER_IP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/wcp/plugin/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/vsphere-plugin.zip -O vsphere-plugin.zip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;unzip -o vsphere-plugin.zip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mv bin/* /usr/local/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tanzu-kubernetes-cluster-creation&#34;&gt;Tanzu Kubernetes Cluster Creation&lt;/h2&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Set all the constants based on the configurations of namespace you performed in the previous step &lt;a href=&#34;../namespace&#34;&gt;&lt;strong&gt;Create and configure a vSphere namespace&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Supervisor Cluster info&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_SUPERVISOR_CLUSTER_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;The_IP_address_of_Link_to_CLI_Tools&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_NAMESPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;namespace-kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## TKG info&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;tkgs-kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1.22.11---vmware.2-tkg.2-zshippable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS_VM_COUNT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS_VM_CLASS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;guaranteed-large
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS_STORAGE_CLASS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pacific-storage-policy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS_STORAGE_SIZE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;70&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## vSphere username / password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VSPHERE_USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;administrator@vsphere.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;KUBECTL_VSPHERE_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Admin!23&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Run the command to login to the Supervisor Cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl vsphere login &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --insecure-skip-tls-verify &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --server&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_SUPERVISOR_CLUSTER_IP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --vsphere-username &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_USERNAME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl config use-context &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_NAMESPACE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Run the command to create a Tanzu Kubernetes Cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;### create TKC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: run.tanzu.vmware.com/v1alpha2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: TanzuKubernetesCluster                  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: ${VSPHERE_TKGS}                      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: ${VSPHERE_NAMESPACE}    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  annotations:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    run.tanzu.vmware.com/resolve-os-image: os-name=ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  topology:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    controlPlane:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      tkr:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        reference:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          name: ${VSPHERE_TKGS_VERSION}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      replicas: 1                                
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      vmClass: ${VSPHERE_TKGS_VM_CLASS}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      storageClass: ${VSPHERE_TKGS_STORAGE_CLASS}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - name: etcd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          mountPath: /var/lib/etcd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          capacity:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            storage: 20Gi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    nodePools:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - name: workers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      replicas: ${VSPHERE_TKGS_VM_COUNT}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      vmClass: ${VSPHERE_TKGS_VM_CLASS}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      storageClass: ${VSPHERE_TKGS_STORAGE_CLASS}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - name: containerd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          mountPath: /var/lib/containerd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          capacity:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            storage: ${VSPHERE_TKGS_STORAGE_SIZE}Gi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  settings:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    storage:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      defaultClass: ${VSPHERE_TKGS_STORAGE_CLASS}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    network:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      cni:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        name: antrea
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      services:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        cidrBlocks: [&amp;#34;198.51.100.0/12&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      pods:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        cidrBlocks: [&amp;#34;192.0.2.0/16&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tanzu-kubernetes-cluster-login&#34;&gt;Tanzu Kubernetes Cluster Login&lt;/h2&gt;
&lt;p&gt;Wait until the Tanzu Kubernetes Cluster is &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get tkc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME             CONTROL PLANE   WORKER   TKR NAME                               AGE   READY   TKR COMPATIBLE   UPDATES AVAILABLE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tkgs-kubeflow    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;        v1.22.11---vmware.2-tkg.2-zshippable   28m  True    True             &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;v1.23.8+vmware.2-tkg.2-zshippable&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the command to login to the Tanzu Kubernetes Cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl vsphere login &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --insecure-skip-tls-verify &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --server&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_SUPERVISOR_CLUSTER_IP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --vsphere-username &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_USERNAME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --tanzu-kubernetes-cluster-namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_NAMESPACE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --tanzu-kubernetes-cluster-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl config use-context &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VSPHERE_TKGS&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;trouble-shooting&#34;&gt;Trouble shooting&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;You see &lt;code&gt;ContentSourceBindingNotFound&lt;/code&gt; error in &lt;code&gt;kubectl get tkc &amp;lt;tkc_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../assets/troubleshooting_contentsource.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Please check if the &lt;code&gt;OVF Template&lt;/code&gt; of content library you used is valid. Or it is duplicated with the existing &lt;code&gt;OVF Template&lt;/code&gt;, which will cause the &lt;code&gt;Stored Locally&lt;/code&gt; flag to be &lt;code&gt;No&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../assets/troubleshooting_contentsource2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Now you are ready to move to the next section &lt;a href=&#34;../carvel&#34;&gt;Deploy Kubeflow&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deploy Kubeflow</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/carvel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/deployment/carvel/</guid>
      <description>
        
        
        &lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configure-a-proxy&#34;&gt;Configure a Proxy&lt;/h4&gt;
&lt;p&gt;If your network have trouble accessing one of the following Docker registries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker.io&lt;/li&gt;
&lt;li&gt;gcr.io&lt;/li&gt;
&lt;li&gt;quay.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;../troubleshooting/proxy&#34;&gt;&lt;strong&gt;Configure a Proxy&lt;/strong&gt;&lt;/a&gt; to configure a proxy.&lt;/p&gt;
&lt;h4 id=&#34;kapp-controller&#34;&gt;Kapp-controller&lt;/h4&gt;
&lt;p&gt;The Carvel package manager &amp;ldquo;Kapp-controller&amp;rdquo; is shipped with unified TKG preinstalled.&lt;/p&gt;
&lt;p&gt;By running the commands, you should see a pod whose name starts with &lt;strong&gt;kapp-controller&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pod -A &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep kapp-controller
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tkg-system    kapp-controller-5b8579cb89-bkgps     2/2     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If not, you need to manually install &lt;code&gt;Kapp-controller&lt;/code&gt; following the guide: &lt;a href=&#34;../troubleshooting/app-platform&#34;&gt;&lt;strong&gt;Install Kapp-controller&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;install-kctrl&#34;&gt;Install kctrl&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;kctrl&lt;/code&gt; a kapp-controller’s native CLI, which will be used to install Kubeflow Carvel Package.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://github.com/vmware-tanzu/carvel-kapp-controller/releases&#34;&gt;https://github.com/vmware-tanzu/carvel-kapp-controller/releases&lt;/a&gt;, and install one release version.&lt;/p&gt;
&lt;p&gt;Or run the following command to install it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;KCTRL_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v0.41.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Installing kctrl...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;dst_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;uname&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; Darwin &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;darwin-amd64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;linux-amd64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -O- github.com/vmware-tanzu/carvel-kapp-controller/releases/download/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KCTRL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/kctrl-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;binary_type&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &amp;gt; /tmp/kctrl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mv /tmp/kctrl &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/kctrl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/kctrl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Installed &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/kctrl &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KCTRL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-packagerepository&#34;&gt;Add PackageRepository&lt;/h2&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns carvel-kubeflow-namespace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl config set-context --current --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;carvel-kubeflow-namespace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package repository add &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --repository kubeflow-carvel-repo &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --url projects.registry.vmware.com/kubeflow/kubeflow-carvel-repo:0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-kubeflow&#34;&gt;Install Kubeflow&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Run the command to print values schema of the Kubeflow package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kctrl package available get -p kubeflow.community.tanzu.vmware.com/1.6.0 --values-schema
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Target cluster &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://10.117.233.12:6443&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;nodes: tkgs-ubucluster-carvel-testing-control-plane-87649, 2+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Values schema &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;kubeflow.community.tanzu.vmware.com/1.6.0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Key                   Default       Type     Description  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CD_REGISTRATION_FLOW  &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;          boolean  Turn on Registration Flow, so that Kubeflow Central Dashboard will prompt new users to create a namespace &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;profile&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IP_address            &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;            string   EXTERNAL_IP address of istio-ingressgateway, valid only &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; service_type is LoadBalancer  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;imageswap_labels      &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;          boolean  Add labels k8s.twr.io/imageswap: enabled to Kubeflow namespaces, which &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; imageswap webhook to swap images.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service_type          LoadBalancer  string   Service &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; of istio-ingressgateway. Available options: &lt;span class=&#34;s2&#34;&gt;&amp;#34;LoadBalancer&amp;#34;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;NodePort&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;static_users          -             array    Dex static user. Hash is bcrypt &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; value of password  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Succeeded
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a values.yaml files according to values schema.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt; values.yaml &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; &amp;#39;EOF&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;imageswap_labels: True
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;service_type: &amp;#34;LoadBalancer&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IP_address: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;CD_REGISTRATION_FLOW: True
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;static_users: 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;- email: &amp;#34;user@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  hash: &amp;#34;$2y$12$4K/VkmDd1q1Orb3xAt82zu8gk7Ad6ReFR4LCP9UeYE90NLiN9Df72&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install Kubeflow 1.6.0 Carvel package and specify the values-file &lt;code&gt;values&lt;/code&gt;.yaml by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package install &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --wait-check-interval 5s &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --wait-timeout 30m0s &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --package-install kubeflow &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --package kubeflow.community.tanzu.vmware.com &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --version 1.6.0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --values-file values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;useful-commands&#34;&gt;Useful Commands:&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Check PackageInstall Status&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get PackageInstall kubeflow -o yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Print status of app created by package installation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package installed status --package-install kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update to an updated values file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package installed update --package-install kubeflow --values-file values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kapp-controller keeps reconciliating Kubeflow, which prevent you from editing a Kubeflow resource. In this case, you may want to pause or trigger of Kubeflow.&lt;/p&gt;
&lt;p&gt;Pausing reconciliation for a package install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package installed pause --package-install kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trigger reconciliation of package install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package installed kick --package-install kubeflow --wait --wait-check-interval 5s --wait-timeout 30m0s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Uninstall installed package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kctrl package installed delete --package-install kubeflow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check more commands on kapp-controller docs: &lt;a href=&#34;https://carvel.dev/kapp-controller/docs/v0.41.0/management-command/&#34;&gt;https://carvel.dev/kapp-controller/docs/v0.41.0/management-command/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;trouble-shooting&#34;&gt;Trouble shooting&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;When deleting the Kubeflow package, Some resources got stuck at &lt;code&gt;deleting&lt;/code&gt; status.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# take namespace knative-serving as an example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl patch ns knative-serving -p &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;finalizers&amp;#34;:null}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete ns knative-serving --grace-period&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --force
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;During &lt;code&gt;kctrl package install&lt;/code&gt;, you see errors like &lt;code&gt;Pending: ImagePullBackOff&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../assets/troubleshooting_imagepullerror.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;../troubleshooting/proxy&#34;&gt;&lt;strong&gt;Configure a Proxy&lt;/strong&gt;&lt;/a&gt; to configure a proxy.&lt;/p&gt;
&lt;p&gt;After proxy is configured properly, you may need to uninstall and install Kubeflow again.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;We have prepared &lt;a href=&#34;../../kubeflow-tutorial&#34;&gt;a basic guide to Kubeflow on vSphere componentes&lt;/a&gt; for you to get started quickly.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Model Serving</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab4/</guid>
      <description>
        
        
        &lt;h1 id=&#34;full-source&#34;&gt;Full Source&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;You can download the complete Jupyter Notebook &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab4.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;preview&#34;&gt;Preview&lt;/h1&gt;
&lt;hr&gt;
&lt;div&gt;
&lt;iframe 
style=&#34;
width: 100%;
height: 80vh;
border: 1px solid #aaa;
margin-bottom: 20px;
&#34;
src=&#34;https://nbviewer.org/github/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab4.ipynb?flush_cache=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;Now move forward to &lt;a href=&#34;../lab5_pipeline_complete/lab5&#34;&gt;Pipeline&lt;/a&gt; about Kubeflow pipeline&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: About</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/about/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Pipeline</title>
      <link>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab5_pipeline_complete/lab5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vmware.github.io/ml-ops-platform-for-vsphere/docs/kubeflow-tutorial/lab5_pipeline_complete/lab5/</guid>
      <description>
        
        
        &lt;h2 id=&#34;full-source&#34;&gt;Full Source&lt;/h2&gt;
&lt;p&gt;You can view and download the complete repo from (including notebooks, datasets, source codes, Dockerfile, etc) &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/tree/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#full-source&#34;&gt;Full Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#understand-pipeline-and-pipeline-components&#34;&gt;Understand Pipeline and Pipeline Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-overview&#34;&gt;Example Overview&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#example-1-facial-keypoint-detection&#34;&gt;Example 1: Facial Keypoint Detection&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#about-model&#34;&gt;About Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#about-pipeline&#34;&gt;About Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#notebook-preview&#34;&gt;Notebook Preview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-2-g-research-crypto-forecasting&#34;&gt;Example 2: G-Research Crypto Forecasting&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#about-model-1&#34;&gt;About Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#about-pipeline-1&#34;&gt;About Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#notebook-preview-1&#34;&gt;Notebook Preview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#running-a-pipeline&#34;&gt;Running a Pipeline&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#upload-the-pipeline-to-kubeflow-ui&#34;&gt;Upload the pipeline to Kubeflow UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-experiment-and-run&#34;&gt;Create experiment and run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#check-logs-and-outputs&#34;&gt;Check logs and outputs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Kubeflow Pipelines is a platform for building and deploying portable, scalable machine learning (ML) workflows based on Docker containers. Each pipeline represents an ML workflow, and includes the specifications of all inputs needed to run the pipeline, as well the outputs of all components.&lt;/p&gt;
&lt;p&gt;Kubeflow Pipelines is one of the most powerful and popular features of Kubeflow. In this lab, we would guide you through two concrete examples  to build up and run Kubeflow pipelines in two different ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/example1_facialKeypoint.ipynb&#34;&gt;Example 1 Facial Keypoint Detection: build pipeline from docker images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/example2_gResearch.ipynb&#34;&gt;Example 2 G-Research Crypto Forecasting: build pipeline from notebook directly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;For each example, we provide you with a already-compiled pipeline YAML files for quick-test purpose. If you prefer that, feel free to skip to pipeline running part and use them.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;understand-pipeline-and-pipeline-components&#34;&gt;Understand Pipeline and Pipeline Components&lt;/h2&gt;
&lt;p&gt;A Kubeflow pipeline is a portable and scalable definition of an ML workflow, based on containers. A pipeline is composed of a set of input parameters and a list of the steps in this workflow. Each step in a pipeline is an instance of a component, which is represented as an instance of &lt;code&gt;ContainerOp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A pipeline component is a containerized application that performs one step in a pipeline’s workflow. Pipeline components are defined in component specifications. More details about components specifications can be found &lt;a href=&#34;https://www.kubeflow.org/docs/components/pipelines/v1/reference/component-spec/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each step in our pipeline’s workflow is an instance of a component. When we define our pipeline, we specify the source of each step’s inputs. Step inputs can be set from the pipeline’s input arguments, constants, or step inputs can depend on the outputs of other steps in this pipeline. Kubeflow Pipelines uses these dependencies to define our pipeline’s workflow as a graph.&lt;/p&gt;
&lt;h2 id=&#34;example-overview&#34;&gt;Example Overview&lt;/h2&gt;
&lt;p&gt;We suggest you go through examples in order, as some concept explanations are more detailed in Example 1.&lt;/p&gt;
&lt;h3 id=&#34;example-1-facial-keypoint-detection&#34;&gt;Example 1: Facial Keypoint Detection&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Notebook, Model source codes, datasets, Dockerfiles, example pipeline YAML file and example pipeline logs are all included in repo.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;about-model&#34;&gt;About Model&lt;/h4&gt;
&lt;p&gt;This model comes from Kaggle Competition. The objective of this task is to predict keypoint positions on face images, which can be used as a building block in several applications, such as analysing facial expressions and biometrics recognition.&lt;/p&gt;
&lt;p&gt;There are two main tasks: train and evaluation. Each would be build as a pipeline component later.&lt;/p&gt;
&lt;p&gt;Datasets for training and testing can be found and downloaded &lt;a href=&#34;https://www.kaggle.com/competitions/facial-keypoints-detection/data&#34;&gt;here&lt;/a&gt;. (You need to download &lt;code&gt;test.zip&lt;/code&gt; and &lt;code&gt;train.zip&lt;/code&gt; files and put them under &lt;code&gt;train/my_data&lt;/code&gt;. More details can be found in &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/example1_facialKeypoint.ipynb&#34;&gt;Example 1 Notebook&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;More details about this model itself can be found &lt;a href=&#34;https://www.kaggle.com/competitions/facial-keypoints-detection&#34;&gt;here on Kaggle Competition page&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;about-pipeline&#34;&gt;About Pipeline&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;In this example, we would first containzernize each pipeline component as a docker image, and then build pipeline from these components&amp;rsquo; images.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When Kubeflow Pipelines executes a component, a container image is started in a Kubernetes Pod and your component’s inputs are passed in as command-line arguments.&lt;/p&gt;
&lt;p&gt;Therefore, while designing pipeline components, we need to consider following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which inputs can be passed to our component by value? And which inputs, which cannot be directly passed as a command-line argument, should be passed to your component by a reference to the input’s path?&lt;/li&gt;
&lt;li&gt;To return an output from our component, the output’s data must be stored as a file. We need to let Kubeflow Pipelines know what outputs our component produces, so that when our pipeline runs, Kubeflow Pipelines can pass the paths that we use to store our component’s outputs as inputs to our component.&lt;/li&gt;
&lt;li&gt;Since your inputs and output paths are passed in as command-line arguments, your component’s code must be able to read inputs from the command line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And in this example, specifically, a component specification should define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The component’s inputs and outputs&lt;/li&gt;
&lt;li&gt;The container image that your component’s code runs in, the command to use to run your component’s code, and the command-line arguments to pass to your component’s code&lt;/li&gt;
&lt;li&gt;The component’s metadata, such as the name and description&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;notebook-preview&#34;&gt;Notebook Preview&lt;/h4&gt;
&lt;hr&gt;
&lt;div&gt;
&lt;iframe 
style=&#34;
width: 100%;
height: 80vh;
border: 1px solid #aaa;
margin-bottom: 20px;
&#34;
src=&#34;https://nbviewer.org/github/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/example1_facialKeypoint.ipynb?flush_cache=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&#34;example-2-g-research-crypto-forecasting&#34;&gt;Example 2: G-Research Crypto Forecasting&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Notebook, example pipeline YAML file and example pipeline logs are included in repo.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;about-model-1&#34;&gt;About Model&lt;/h4&gt;
&lt;p&gt;This model comes from Kaggle Competition. Over $40 billion worth of cryptocurrencies are traded every day. The objective of this task is to correctly forecast short term returns in 14 popular cryptocurrencies. &lt;a href=&#34;https://www.gresearch.co.uk/&#34;&gt;G-Research&lt;/a&gt; is Europe’s leading quantitative finance research firm, and partered with &lt;a href=&#34;https://www.cambridgespark.com&#34;&gt;Cambridge Spark&lt;/a&gt; for this Kaggle Competition.&lt;/p&gt;
&lt;p&gt;The dataset this model would use contains information on historic trades for several cryptoassets, such as Bitcoin and Ethereum. Dataset would be downloaded from Kaggle.&lt;/p&gt;
&lt;p&gt;More details about this model and dataset itself or Kaggle Competition can be found &lt;a href=&#34;https://www.kaggle.com/competitions/g-research-crypto-forecasting/overview&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;about-pipeline-1&#34;&gt;About Pipeline&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;In this example, we would directly build pipeline components in notebook, from model itself. Some modifications are required to the original model function.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Again, we design our pipeline component by component. We build our components this time as Python function-based components. The Kubeflow Pipelines SDK makes it easier to build lightweight Python function-based components by saving the effort of creating a component specification. Python function-based components make it easier to build pipeline components by building the component specification for you. Python function-based components also handle the complexity of passing inputs into your component and passing your function’s outputs back to your pipeline.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s walk through this concrete example to understand above ideas better.&lt;/p&gt;
&lt;p&gt;Note that the overall workflow follows from original model itself. So please do not freak out when you see long, heavy code cells.&lt;/p&gt;
&lt;p&gt;Basically, the following modifications were required to the original function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The import statements were moved inside of the function. Python function-based components require standalone Python functions. This means that any required import statements must be defined within the function, and any helper functions must be defined within the function.&lt;/li&gt;
&lt;li&gt;The function’s arguments all include &lt;code&gt;data_path&lt;/code&gt; which specifies the location for data storage, and also accessing. This lets Kubeflow Pipelines know the where to extract the data in zipped tar file into, where your function stores the processed data or model, and where to access it and use it as inputs for components.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;notebook-preview-1&#34;&gt;Notebook Preview&lt;/h4&gt;
&lt;hr&gt;
&lt;div&gt;
&lt;iframe 
style=&#34;
width: 100%;
height: 80vh;
border: 1px solid #aaa;
margin-bottom: 20px;
&#34;
src=&#34;https://nbviewer.org/github/vmware/ml-ops-platform-for-vsphere/blob/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/example2_gResearch.ipynb?flush_cache=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&#34;running-a-pipeline&#34;&gt;Running a Pipeline&lt;/h2&gt;
&lt;p&gt;In both examples, we compiled the pipeline as a YAML file. So here we provide you with a brief guide on how to run a pipeline.&lt;/p&gt;
&lt;p&gt;We would use Example 2: G-Research Crypto Forecasting as example.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: following pictures would be loaded and displayed on our website. If you are reading this markdown file in github repo, following pictures may not be loaded. If that is the case, please view them in &lt;code&gt;./img&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;upload-the-pipeline-to-kubeflow-ui&#34;&gt;Upload the pipeline to Kubeflow UI&lt;/h3&gt;
&lt;p&gt;Following our notebook, you should be able to see a file called &lt;code&gt;pipeline_gResearch.yaml&lt;/code&gt;, under the same directory of the example 2 notebook. Download &lt;code&gt;pipeline_gResearch.yaml&lt;/code&gt;, and upload it to Pipelines on Kubeflow UI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/g1.png&#34; alt=&#34;g1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/g2.png&#34; alt=&#34;g2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/g3.png&#34; alt=&#34;g3&#34;&gt;&lt;/p&gt;
&lt;p&gt;This pipeline graph is more complex than the one in Example 1. You may take some time going through it.&lt;/p&gt;
&lt;h3 id=&#34;create-experiment-and-run&#34;&gt;Create experiment and run&lt;/h3&gt;
&lt;p&gt;Create an experiment for this pipeline, and create a run. This time, you need to provide two inputs, &lt;code&gt;dataset&lt;/code&gt; and &lt;code&gt;data_path&lt;/code&gt;, exactly the ones for our first step Data Download. If you do not intend to make any personalization on datasets and data path, enter following values&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;#34;&amp;#34; not needed while inputting them&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dataset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;g-research-crypto-forecasting&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/mnt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../img/g4.png&#34; alt=&#34;g4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/g5.png&#34; alt=&#34;g5&#34;&gt;&lt;/p&gt;
&lt;p&gt;The pipeline would start to run then. You would be able to see the running process in Runs Page on Kubeflow UI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/g6.png&#34; alt=&#34;g6&#34;&gt;&lt;/p&gt;
&lt;p&gt;The pipeline running may take some time, as the datasets is pretty big and there are much more steps in this example. There would be a green symbol appears next to each component after its completion. And you can always click on each component to see its details, such as its input/output, volumes, logs, and pod.&lt;/p&gt;
&lt;h3 id=&#34;check-logs-and-outputs&#34;&gt;Check logs and outputs&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../img/g7.png&#34; alt=&#34;g7&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the whole pipeline finishes running, click on any of the component/step that you are interested in. You should be able to see main-logs under Input/Output, Output artifacts.&lt;/p&gt;
&lt;p&gt;Specifically, click on Evaluation Result Step, you should see &amp;ldquo;metrics&amp;rdquo; under Input/Output, Output artifacts. Click into them to see the evaluation metrics.&lt;/p&gt;
&lt;p&gt;We also provide you with example logs of evaluation metrics in &lt;a href=&#34;https://github.com/vmware/ml-ops-platform-for-vsphere/tree/main/website/content/en/docs/kubeflow-tutorial/lab5_pipeline_complete/logs&#34;&gt;logs&lt;/a&gt; folder.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
